@using ClientsWebApp.Application.Models.Doctors;
@inherits CancellableComponent
@inject IDoctorService DoctorService
@attribute [Authorize(Roles = "Doctor,Admin")]

<div class="col m-3">
    @if (IsLoading)
    {
        <Loading />
    }
    else
    {
        @if (IsDateChanges)
        {
            <EditForm Model="@Data" OnValidSubmit="ChangeAsync" class="form">
                <FormInputSelect @bind-Value="@Data.Status" Label="Status" Id="status"
                         Values="@Statuses" GetLabelHandler="@(x => x)" GetValueHandler="@(x => x)" />
                <input type="submit" class="btn btn-success w-100" value="Изменить" />
                <input type="button" class="btn btn-danger w-100" value="Отмена" @onclick="@StopChanging" />
            </EditForm>
        }
        else
        {
            <input type="button" class="btn-primary w-100" value="Change status" @onclick="StartChanging" />
        }
    }
</div>

@code {
    [Parameter] public Doctor Doctor { get; set; }
    [Parameter] public EventCallback OnStatusChanged { get; set; }

    private bool IsDateChanges { get; set; }
    private bool IsLoading { get; set; } = false;
    private IEnumerable<WorkStatus> Statuses { get; set; }
    private ChangeDoctorStatusData Data { get; set; }

    protected override void OnInitialized()
    {
        Statuses = Enum.GetValues<WorkStatus>();
        Data = new ChangeDoctorStatusData() { Status = Doctor.Status };
    }

    private void StartChanging()
    {
        IsDateChanges = true;
    }
    private void StopChanging()
    {
        IsDateChanges = false;
    }
    private async Task ChangeAsync()
    {
        IsLoading = true;

        var changestatusModel = new ChangeDoctorStatusModel(Data.Status);
        await DoctorService.UpdateStatusAsync(Doctor.Id, changestatusModel, _cts.Token);
        await OnStatusChanged.InvokeAsync();
        StopChanging();
        IsLoading = false;
    }
}
