@inherits CancellableComponent
@inject ClientsWebApp.Domain.Identity.IAuthorizationService AuthorizationService

<div class="col">
    @if (IsLoading)
    {
        <Loading />
    }
    else
    {
        <AuthorizeView Roles="Admin">
            <Authorized Context="editRole">
                @if (IsRoleChanges)
                {
                    <EditForm Model="@ChangeRoleData" OnValidSubmit="ChangeAsync" class="form">
                        <div class="row">
                            <div class="col bg-success bg-opacity-10 p-2">
                                <FormInputSelect Label="Роль" Id="role" @bind-Value="ChangeRoleData.Role" Values="Roles" GetLabelHandler="@(x => x)" GetValueHandler="@(x => x)" />
                            </div>
                        </div>
                        <input class="btn btn-primary" type="submit" />
                    </EditForm>
                }
                else
                {
                    <input type="button" value="Изменить роль" @onclick="StartChanging" />
                }
            </Authorized>
        </AuthorizeView>
    }
</div>

@code {
    [Parameter] public string Email { get; set; }
    [Parameter] public EventCallback OnRoleChanged { get; set; }

    private bool IsRoleChanges { get; set; }
    private bool IsLoading { get; set; } = false;
    private List<string> Roles { get; set; } = new List<string>() { "Patient", "Admin", "Doctor" };
    private ChangeRoleData ChangeRoleData { get; set; }

    protected override void OnInitialized()
    {
        ChangeRoleData = new ChangeRoleData() { Role = Roles.First() };
    }

    private void StartChanging()
    {
        IsRoleChanges = true;
    }
    private async Task ChangeAsync()
    {
        IsLoading = true;
        var role = Enum.Parse<Role>(ChangeRoleData.Role);
        await AuthorizationService.UpdateRole(Email, role, _cts.Token);
        await OnRoleChanged.InvokeAsync();
        IsRoleChanges = false;
        IsLoading = false;
    }
}
