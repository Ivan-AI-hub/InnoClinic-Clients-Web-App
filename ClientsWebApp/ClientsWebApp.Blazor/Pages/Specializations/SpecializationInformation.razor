@page "/specializations/{specializationId:guid}"
@attribute [Authorize(Roles = "Admin")]
@inherits CancellableComponent
@inject ISpecializationManager specializationManager
@inject NavigationManager navigationManager

@if (Specialization != null)
{
    <div class="container p-5">
        <MudPaper Square Elevation=3 Class="row p-3 mb-5 align-items-center">
            <MudText Typo=Typo.h5 class="d-flex justify-content-center mb-3">@Specialization.Name</MudText>

            <div class="col">
                <MudCheckBox Color="Color.Primary" Label=@_localizer.GetString(LocalizationType.Status) @bind-Value="Specialization.IsActive" @oninput="@CheckBoxChanged" />
            </div>
            <div class="col">
                <MudButton Color="Color.Info" Variant=Variant.Filled OnClick="NavigateToEditPage">
                    <MudIcon Icon="@Icons.Material.Filled.Edit" />
                    <span class="ml-2">
                        @_localizer.GetString(LocalizationType.EditButtonValue)
                    </span>
                </MudButton>
            </div>
        </MudPaper>
    
        <div class="text-center">
            <MudText Typo="Typo.h6">Services</MudText>
            @foreach (var service in Specialization.Services)
            {
                <ServiceCard Service="service" />
            }
        </div>
    </div>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public Guid SpecializationId { get; set; }

    private Specialization? Specialization;
    private Image? image;

    protected async override Task OnInitializedAsync()
    {
        Specialization = await specializationManager.GetByIdAsync(SpecializationId, _cts.Token);
    }

    private async void CheckBoxChanged(ChangeEventArgs args)
    {
        await specializationManager.ChangeStatusAsync(SpecializationId, !@Specialization.IsActive, _cts.Token);
    }

    private void NavigateToEditPage()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditSpecialization.SpecializationId), SpecializationId);
        parameters.Add(nameof(EditSpecialization.OldSpecialization), Specialization);
        Modal.Show<EditSpecialization>(@_localizer.GetString(LocalizationType.EditSpecializationButtonValue), parameters, options);
    }
}