@inherits CancellableComponent;
@inject ISpecializationManager SpecializationManager

<MudPaper Square Elevation=3 Class="row p-3 mb-3 align-items-center">
    <div class="col">
        <p>@_localizer.GetString(LocalizationType.Name): @Service.Name</p>
        <p>@_localizer.GetString(LocalizationType.Price): @Service.Price</p>
    </div>
    <div class="col">
        @if(!HideSpecialization)
        {
            <p>@_localizer.GetString(LocalizationType.Specialization): @Specialization?.Name</p>
        }
        <p>@_localizer.GetString(LocalizationType.Category): @_localizer.GetString(@Service.Category?.Name)</p>
        <p>@_localizer.GetString(LocalizationType.Status): @Service.Status</p>
    </div>
    <AuthorizeView Roles="Admin">
        <div class="col">
            <MudButton Color=Color.Primary Variant="Variant.Filled" OnClick="ToEditPage">@_localizer.GetString(LocalizationType.EditButtonValue)</MudButton>
        </div>
    </AuthorizeView>
</MudPaper>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public Service Service { get; set; }
    [Parameter] public bool HideSpecialization { get; set; } = false;

    private Specialization? Specialization { get; set; }
    protected async override Task OnInitializedAsync()
    {
        Specialization = Service.Specialization;
        if (Specialization == null)
        {
            Specialization = await SpecializationManager.GetByIdAsync(Service.SpecializationId, _cts.Token);
        }
    }

    private void ToEditPage()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditService.ServiceId), Service.Id);
        parameters.Add(nameof(EditService.SpecializationId), Specialization.Id);
        parameters.Add(nameof(EditService.OldService), Service);
        Modal.Show<EditService>(_localizer.GetString(LocalizationType.EditServiceButtonValue), parameters);
    }
}
